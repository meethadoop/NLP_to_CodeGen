from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import asyncio
from datetime import datetime

from nlsql.main import NLSQL  # Changed the import
from nlsql.config import Config, load_config
from nlsql.utils.logger import get_logger

logger = get_logger(__name__)

class QueryRequest(BaseModel):
    query: str
    use_cache: bool = True
    export_format: Optional[str] = None

class TemplateRequest(BaseModel):
    template_name: str
    parameters: Dict[str, str]
    export_format: Optional[str] = None

class TemplateDefinition(BaseModel):
    name: str
    description: str
    template: str
    parameters: List[str]

app = FastAPI(
    title="NLSQL API",
    description="Natural Language to SQL Query Service",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

async def get_nlsql():
    config = load_config()
    nlsql = NLSQL(config)
    try:
        yield nlsql
    finally:
        nlsql.close()

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

@app.post("/query")
async def process_query(
    request: QueryRequest,
    background_tasks: BackgroundTasks,
    nlsql: NLSQL = Depends(get_nlsql)
):
    try:
        result = await nlsql.process_query(request.query, use_cache=request.use_cache)
        return JSONResponse(content=result)
    except Exception as e:
        logger.error(f"Query processing error: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/query/template")
async def process_template(
    request: TemplateRequest,
    background_tasks: BackgroundTasks,
    nlsql: NLSQL = Depends(get_nlsql)
):
    try:
        result = await nlsql.process_template(
            request.template_name,
            request.parameters
        )
        return JSONResponse(content=result)
    except Exception as e:
        logger.error(f"Template processing error: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))
